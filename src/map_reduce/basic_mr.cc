#include <string>
#include <fstream>
#include <map>
#include <cctype>
#include <iostream>
#include <vector>
#include <algorithm>
#include <sstream>

#include "map_reduce/protocol.h"

namespace mapReduce
{
    std::vector<std::string> Strip(const std::string &word)
    {
        std::vector<std::string> result;
        std::string current_word;

        for (const char c : word)
        {
            if (std::isalpha(c))
            {
                current_word += c;
            }
            else if (!current_word.empty())
            {
                result.emplace_back(current_word);
                current_word.clear();
            }
        }

        if (!current_word.empty())
        {
            result.emplace_back(current_word);
        }

        return result;
    }

    //
    // The map function is called once for each file of input. The first
    // argument is the name of the input file, and the second is the
    // file's complete contents. You should ignore the input file name,
    // and look only at the contents argument. The return value is a slice
    // of key/value pairs.
    //
    std::vector<KeyVal> Map(const std::string &content)
    {
        std::vector<KeyVal> ret;
        std::map<std::string, int> ret_map;
        std::istringstream ss(content);
        std::string word;

        while (ss >> word)
        {
            auto words = Strip(word);
            for (const auto &w : words)
            {
                if (!w.empty())
                {
                    ret_map[w] += 1;
                }
            }
        }

        for (const auto &[word, times] : ret_map)
        {
            ret.emplace_back(KeyVal(word, std::to_string(times)));
        }

        return ret;
    }

    //
    // The reduce function is called once for each key generated by the
    // map tasks, with a list of all the values created for that key by
    // any map task.
    //
    std::string Reduce(const std::string &key,
                       const std::vector<std::string> &values)
    {
        // Your code goes here
        // Hints: return the number of occurrences of the word.
        long ret_num = 0;
        for (const auto &times : values)
        {
            ret_num += std::stol(times);
        }
        return std::to_string(ret_num);
    }
}